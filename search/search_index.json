{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"about/","text":"","title":"About"},{"location":"action/","text":"See the StrucEnb Library in Action Video Tour Example 1 Example 2","title":"See in Action"},{"location":"action/#see-the-strucenb-library-in-action","text":"","title":"See the StrucEnb Library in Action"},{"location":"action/#video-tour","text":"","title":"Video Tour"},{"location":"action/#example-1","text":"","title":"Example 1"},{"location":"action/#example-2","text":"","title":"Example 2"},{"location":"other_component/home/","text":"Other Component","title":"Other Component"},{"location":"other_component/home/#other-component","text":"","title":"Other Component"},{"location":"strucenglib_plugin/eth_zurich_members/","text":"StrucEng Library within ETH Zurich Rhino Floating License ETH Zurich members may use a free floating license with Rhino Cloud Zoo when connected with VPN. Abaqus Abaqus FEA is a software suite for finite element analysis and computer-aided engineering. Its installation cannot be automated. For ETH Zurich members, order a free copy via IT shop: Abaqus 2021 Follow installation instructions in IT shop: Install: ..\\AM_SIM_Abaqus_Extend.AllOS\\1\\setup.exe License Server (ETH VPN): SIMULIA FLEXnet with License Server: 1973@lic-abaqus-teaching.ethz.ch","title":"StrucEng Library within ETH Zurich"},{"location":"strucenglib_plugin/eth_zurich_members/#struceng-library-within-eth-zurich","text":"","title":"StrucEng Library within ETH Zurich"},{"location":"strucenglib_plugin/eth_zurich_members/#rhino-floating-license","text":"ETH Zurich members may use a free floating license with Rhino Cloud Zoo when connected with VPN.","title":"Rhino Floating License"},{"location":"strucenglib_plugin/eth_zurich_members/#abaqus","text":"Abaqus FEA is a software suite for finite element analysis and computer-aided engineering. Its installation cannot be automated. For ETH Zurich members, order a free copy via IT shop: Abaqus 2021 Follow installation instructions in IT shop: Install: ..\\AM_SIM_Abaqus_Extend.AllOS\\1\\setup.exe License Server (ETH VPN): SIMULIA FLEXnet with License Server: 1973@lic-abaqus-teaching.ethz.ch","title":"Abaqus"},{"location":"strucenglib_plugin/getting_started/","text":"Getting Started The StrucEngLib Plugin is currently supported under Microsoft Windows. For installation, ensure you have the following prerequisites installed. Install Rhinoceros 3D The StrucEngLib Plugin is built as a RhinoCommon plugin. Ensure you have a recent version Rhinoceros \u00ae installed. Note We tested and wrote the plugin for Version 7 SR19 or later Steps for ETH Zurich members Install Finite Element Analysis Solver The StrucEngLib plugin will issue a Finite Element Analysis Solver under-the-hood. Ensure you have on of the following Finite-Element analyzers solvers installed. Note that if you are using StrucEngLib Remote Server , no finite element analysis solver is required. Abaqus FEA Note A third party Installation guide for Abaqus can be found here . Steps for ETH Zurich members Install Anacoda The StrucEng Library requires Python and Anaconda installed. Download the Anaconda installer for Windows (64-Bit Graphical Installer) and follow the installation steps. Default options in the installer suffice.","title":"Prerequisites"},{"location":"strucenglib_plugin/getting_started/#getting-started","text":"The StrucEngLib Plugin is currently supported under Microsoft Windows. For installation, ensure you have the following prerequisites installed.","title":"Getting Started"},{"location":"strucenglib_plugin/getting_started/#install-rhinoceros-3d","text":"The StrucEngLib Plugin is built as a RhinoCommon plugin. Ensure you have a recent version Rhinoceros \u00ae installed. Note We tested and wrote the plugin for Version 7 SR19 or later Steps for ETH Zurich members","title":"Install Rhinoceros 3D"},{"location":"strucenglib_plugin/getting_started/#install-finite-element-analysis-solver","text":"The StrucEngLib plugin will issue a Finite Element Analysis Solver under-the-hood. Ensure you have on of the following Finite-Element analyzers solvers installed. Note that if you are using StrucEngLib Remote Server , no finite element analysis solver is required. Abaqus FEA Note A third party Installation guide for Abaqus can be found here . Steps for ETH Zurich members","title":"Install Finite Element Analysis Solver"},{"location":"strucenglib_plugin/getting_started/#install-anacoda","text":"The StrucEng Library requires Python and Anaconda installed. Download the Anaconda installer for Windows (64-Bit Graphical Installer) and follow the installation steps. Default options in the installer suffice.","title":"Install Anacoda"},{"location":"strucenglib_plugin/home/","text":"StrucEng Library Rhinoceros Plugin The StrucEng Library Plugin unites and extends Finite Element Analysis of Compas FEA into Rhinoceros 3D . It features Rhino user-interfaces and bundles various FE models to support the structural analysis of reinforced concrete and masonry. StrucEng Library Plugin in Action The following pages will assist the installation of the plugin in Rhinoceros 3D. Start with the Prerequisite Steps to ensure you have all necessary software components installed.","title":"Home"},{"location":"strucenglib_plugin/home/#struceng-library-rhinoceros-plugin","text":"The StrucEng Library Plugin unites and extends Finite Element Analysis of Compas FEA into Rhinoceros 3D . It features Rhino user-interfaces and bundles various FE models to support the structural analysis of reinforced concrete and masonry. StrucEng Library Plugin in Action The following pages will assist the installation of the plugin in Rhinoceros 3D. Start with the Prerequisite Steps to ensure you have all necessary software components installed.","title":"StrucEng Library Rhinoceros Plugin"},{"location":"strucenglib_plugin/installation/","text":"The easiest way to install StrucEngLibrary Plugin is with Rhino's Package Manager. Rhino Package Manager recommended Type PackageManager in Rhino command line and search for StrucEngLibPlugin in the search bar. Select the latest version, then hit install, and restart Rhino. Rhino Package Manager Note For a list of recent changes, see the changelog . If you are interested in developer builds, enable Include pre-releases . Menu bar and Command integration Upon restart, the plugin integrates into Rhino menu bar and is accessible under Tools - StrucEngLib Plugin as well as in the command line with StrucEngLib* . If plugin load fails with an error, ensure that the plugin is loaded PluginManager settings: Post Installation Upon installation of the plugin, various python dependencies must be downloaded. Note The installer will also install the latest versions of Compas and Compas FEA 1 from pip. Download code snippets Type StrucEngLibInstallDependencies in Rhino command line to open the dialog shown below. StrucEng Library Dependency Installer For Anaconda Home Directory select your Anacoda installation directory from prerequisite step and press Install . The StrucEngLib Plugin will use anaconda to create a new virtual environment, and install all required python depdencies. With Test Import , the python dependencies can be checked. Upon failure, an error message is shown. Note The installer will use Compas to install python dependencies into Rhino's include directory %AppData%\\McNeel\\Rhinoceros\\7.0\\scripts . Compas/ Compas Fea no longer recommends to set %PYTHONPATH% variable. In case you still have it manually set, please undo. If you changed Rhino's Modules Search Path in Python Editor, please remove them ( Why ) StrucEngLib Plugin installer will take care of python dependencies. The dependency installer installs the following dependencies . Upon installation errors, try removing the virtual environment completely. Delete CONDA_HOME /envs/strucenglib* directories.","title":"Installation"},{"location":"strucenglib_plugin/installation/#rhino-package-manager-recommended","text":"Type PackageManager in Rhino command line and search for StrucEngLibPlugin in the search bar. Select the latest version, then hit install, and restart Rhino. Rhino Package Manager Note For a list of recent changes, see the changelog . If you are interested in developer builds, enable Include pre-releases .","title":"Rhino Package Manager  recommended"},{"location":"strucenglib_plugin/installation/#menu-bar-and-command-integration","text":"Upon restart, the plugin integrates into Rhino menu bar and is accessible under Tools - StrucEngLib Plugin as well as in the command line with StrucEngLib* . If plugin load fails with an error, ensure that the plugin is loaded PluginManager settings:","title":"Menu bar and Command integration"},{"location":"strucenglib_plugin/installation/#post-installation","text":"Upon installation of the plugin, various python dependencies must be downloaded. Note The installer will also install the latest versions of Compas and Compas FEA 1 from pip.","title":"Post Installation"},{"location":"strucenglib_plugin/installation/#download-code-snippets","text":"Type StrucEngLibInstallDependencies in Rhino command line to open the dialog shown below. StrucEng Library Dependency Installer For Anaconda Home Directory select your Anacoda installation directory from prerequisite step and press Install . The StrucEngLib Plugin will use anaconda to create a new virtual environment, and install all required python depdencies. With Test Import , the python dependencies can be checked. Upon failure, an error message is shown. Note The installer will use Compas to install python dependencies into Rhino's include directory %AppData%\\McNeel\\Rhinoceros\\7.0\\scripts . Compas/ Compas Fea no longer recommends to set %PYTHONPATH% variable. In case you still have it manually set, please undo. If you changed Rhino's Modules Search Path in Python Editor, please remove them ( Why ) StrucEngLib Plugin installer will take care of python dependencies. The dependency installer installs the following dependencies . Upon installation errors, try removing the virtual environment completely. Delete CONDA_HOME /envs/strucenglib* directories.","title":"Download code snippets"},{"location":"strucenglib_plugin/screenshots/","text":"Screenshots Pictures below are based on version v0.0.13 and later. They may change in future versions. Analysis Step Settings in Linear FE model Sandwich Model Analysis Settings","title":"Screenshots"},{"location":"strucenglib_plugin/screenshots/#screenshots","text":"Pictures below are based on version v0.0.13 and later. They may change in future versions. Analysis Step Settings in Linear FE model Sandwich Model Analysis Settings","title":"Screenshots"},{"location":"strucenglib_plugin/server/","text":"StrucEngLib Server The StrucEng Library features a server component to run FEA solvers on a remote host. This simplifies configuration setup and increases execution speed as FEA computations are remotely executed. Running StrucEngLib Server A server instance is deployed on ibkpika host. When connected to ETH network, browse http://ibkpika.ethz.ch:8080/ to access the server log. The server log shows remote computation status logs. You may access the log during remote computations to keep track of computation results. Connecting with StrucEngLibrary Plugin In Rhino 3D, ensure to have latest strucenglib plugin version installed. Ensure to re-run StrucEnglibInstallDependencies command in Rhino to update all Python dependencies. Enable Remote Computations Configure the remote server in Settings Tab . Set the remote server to endpoint ws://ibkpika.ethz.ch:8080/api/compute . Select Execute on Remote Server and inspect or execute model. The FEA computation will then be executed on remote server. Note You must be connected to ETH VPN to issue requests to the server (Wifi connection itself is not sufficient) Generated Code Remote computations outsource Compas FEA analyse_and_extract invocations to the server. The following snippet is auto generated with Rhino 3D StrucEng Library Plugin. from compas_fea.structure import Structure from strucenglib_connect import connect mdl = Structure ( name = 'Rahmen' , path = 'C:\\Temp' ) # ... # 1. Run locally mdl . analyse_and_extract ( software = 'abaqus' , fields = [ 'sf' , 'sm' ] ) # 2. or Run on Sever instead mdl = connect . analyse_and_extract ( 'ws://ibkpika.ethz.ch:8080/api/compute' , mdl , software = 'abaqus' , fields = [ 'sf' , 'sm' ]) # ... Analyse_and_extract can either be executed locally (1.) or remotely (2.). Remote and local invocations accept the same set of compas FEA parameters. Source Code The server component is hosted on GitHub .","title":"StrucEngLib Server"},{"location":"strucenglib_plugin/server/#strucenglib-server","text":"The StrucEng Library features a server component to run FEA solvers on a remote host. This simplifies configuration setup and increases execution speed as FEA computations are remotely executed.","title":"StrucEngLib Server"},{"location":"strucenglib_plugin/server/#running-strucenglib-server","text":"A server instance is deployed on ibkpika host. When connected to ETH network, browse http://ibkpika.ethz.ch:8080/ to access the server log. The server log shows remote computation status logs. You may access the log during remote computations to keep track of computation results.","title":"Running StrucEngLib Server"},{"location":"strucenglib_plugin/server/#connecting-with-strucenglibrary-plugin","text":"In Rhino 3D, ensure to have latest strucenglib plugin version installed. Ensure to re-run StrucEnglibInstallDependencies command in Rhino to update all Python dependencies.","title":"Connecting with StrucEngLibrary Plugin"},{"location":"strucenglib_plugin/server/#enable-remote-computations","text":"Configure the remote server in Settings Tab . Set the remote server to endpoint ws://ibkpika.ethz.ch:8080/api/compute . Select Execute on Remote Server and inspect or execute model. The FEA computation will then be executed on remote server. Note You must be connected to ETH VPN to issue requests to the server (Wifi connection itself is not sufficient)","title":"Enable Remote Computations"},{"location":"strucenglib_plugin/server/#generated-code","text":"Remote computations outsource Compas FEA analyse_and_extract invocations to the server. The following snippet is auto generated with Rhino 3D StrucEng Library Plugin. from compas_fea.structure import Structure from strucenglib_connect import connect mdl = Structure ( name = 'Rahmen' , path = 'C:\\Temp' ) # ... # 1. Run locally mdl . analyse_and_extract ( software = 'abaqus' , fields = [ 'sf' , 'sm' ] ) # 2. or Run on Sever instead mdl = connect . analyse_and_extract ( 'ws://ibkpika.ethz.ch:8080/api/compute' , mdl , software = 'abaqus' , fields = [ 'sf' , 'sm' ]) # ... Analyse_and_extract can either be executed locally (1.) or remotely (2.). Remote and local invocations accept the same set of compas FEA parameters.","title":"Generated Code"},{"location":"strucenglib_plugin/server/#source-code","text":"The server component is hosted on GitHub .","title":"Source Code"},{"location":"strucenglib_plugin/server_analyze_and_extract.py/","text":"# This is auto generated code by StrucEngLib Plugin 0.0.13 # Find source at https://github.com/kfmResearch-NumericsTeam/StrucEng_Library_Plug_in # Code generated at 2023-01-22T19:11:52.3331205+01:00 # Issued by user Andrin # Action: Generate LinFe Code from compas_fea.cad import rhino from compas_fea.structure import ElasticIsotropic from compas_fea.structure import ElementProperties as Properties from compas_fea.structure import GeneralStep from compas_fea.structure import GravityLoad from compas_fea.structure import AreaLoad from compas_fea.structure import PointLoad from compas_fea.structure import GeneralDisplacement from compas_fea.structure import FixedDisplacement from compas_fea.structure import FixedDisplacementXX from compas_fea.structure import FixedDisplacementYY from compas_fea.structure import FixedDisplacementZZ from compas_fea.structure import PinnedDisplacement from compas_fea.structure import RollerDisplacementX from compas_fea.structure import RollerDisplacementY from compas_fea.structure import RollerDisplacementZ from compas_fea.structure import RollerDisplacementXY from compas_fea.structure import RollerDisplacementYZ from compas_fea.structure import RollerDisplacementXZ from compas_fea.structure import ShellSection from compas_fea.structure import Structure from strucenglib_connect import connect # Snippets based on code of Andrew Liew (github.com/andrewliew), Benjamin Berger (github.com/Beberger) name = 'Rahmen' path = 'C:\\Temp \\\\ ' mdl = Structure ( name = name , path = path ) # Elements rhino . add_nodes_elements_from_layers ( mdl , mesh_type = 'ShellElement' , layers = [ 'elset_deck' , 'elset_wall_right' , 'elset_wall_left' ] ) mdl . elements [ 0 ] . axes . update ({ 'ex' : [ 1 , 0 , 0 ], 'ey' : [ 0 , - 1 , 0 ], 'ez' : [ 0 , 0 , - 1 ]}) # for layer: elset_deck mdl . elements [ 100 ] . axes . update ({ 'ex' : [ 0 , 0 , 1 ], 'ey' : [ 0 , - 1 , 0 ], 'ez' : [ 1 , 0 , 0 ]}) # for layer: elset_wall_right mdl . elements [ 200 ] . axes . update ({ 'ex' : [ 0 , 0 , - 1 ], 'ey' : [ 0 , - 1 , 0 ], 'ez' : [ - 1 , 0 , 0 ]}) # for layer: elset_wall_left # Sets rhino . add_sets_from_layers ( mdl , layers = [ 'nset_pinned' ] ) # Materials mdl . add ( ElasticIsotropic ( name = 'elset_deck_element_mat_elastic' , E = 33700 , v = 0.0 , p = 2500 / 10 ** 9 )) # for layer: elset_deck mdl . add ( ElasticIsotropic ( name = 'elset_wall_right_element_mat_elastic' , E = 33700 , v = 0.0 , p = 2500 / 10 ** 9 )) # for layer: elset_wall_right mdl . add ( ElasticIsotropic ( name = 'elset_wall_left_element_mat_elastic' , E = 33700 , v = 0.0 , p = 2500 / 10 ** 9 )) # for layer: elset_wall_left # Sections mdl . add ( ShellSection ( name = 'elset_deck_element_sec' , t = 100 )) # for layer: elset_deck mdl . add ( ShellSection ( name = 'elset_wall_right_element_sec' , t = 100 )) # for layer: elset_wall_right mdl . add ( ShellSection ( name = 'elset_wall_left_element_sec' , t = 100 )) # for layer: elset_wall_left # Properties mdl . add ( Properties ( name = 'elset_deck_element_prop' , material = 'elset_deck_element_mat_elastic' , section = 'elset_deck_element_sec' , elset = 'elset_deck' )) mdl . add ( Properties ( name = 'elset_wall_right_element_prop' , material = 'elset_wall_right_element_mat_elastic' , section = 'elset_wall_right_element_sec' , elset = 'elset_wall_right' )) mdl . add ( Properties ( name = 'elset_wall_left_element_prop' , material = 'elset_wall_left_element_mat_elastic' , section = 'elset_wall_left_element_sec' , elset = 'elset_wall_left' )) # Displacements mdl . add ([ PinnedDisplacement ( name = 'nset_pinned_set_disp' , nodes = 'nset_pinned' ), ]) # Loads mdl . add ( GravityLoad ( name = 'load_0_gravity' , x = 0.0 , y = 0.0 , z = 1.0 , elements = [ 'elset_deck' , 'elset_wall_right' , 'elset_wall_left' ] )) mdl . add ( AreaLoad ( name = 'load_1_area' , elements = [ 'elset_deck' ] , z = 0.03 , axes = 'local' )) # Steps mdl . add ([ GeneralStep ( name = 'step_1' , displacements = [ 'nset_pinned_set_disp' ] , nlgeom = False ), GeneralStep ( name = 'step_2' , loads = [ 'load_1_area' ] , nlgeom = False ), ]) mdl . steps_order = [ 'step_1' , 'step_2' ] # Summary mdl . summary () # Run on Sever ws://ibkpika.ethz.ch:8080 mdl = connect . analyse_and_extract ( 'ws://ibkpika.ethz.ch:8080/api/compute' , mdl , software = 'abaqus' , fields = [ 'sf' , 'sm' ] ) # Plot Step step_1 # Plot Step step_2 rhino . plot_data ( mdl , step = 'step_2' , field = 'sf1' , cbar_size = 1 ) rhino . plot_data ( mdl , step = 'step_2' , field = 'sf2' , cbar_size = 1 ) rhino . plot_data ( mdl , step = 'step_2' , field = 'sf3' , cbar_size = 1 ) rhino . plot_data ( mdl , step = 'step_2' , field = 'sf4' , cbar_size = 1 ) rhino . plot_data ( mdl , step = 'step_2' , field = 'sf5' , cbar_size = 1 ) rhino . plot_data ( mdl , step = 'step_2' , field = 'sm1' , cbar_size = 1 ) rhino . plot_data ( mdl , step = 'step_2' , field = 'sm2' , cbar_size = 1 ) rhino . plot_data ( mdl , step = 'step_2' , field = 'sm3' , cbar_size = 1 )","title":"Server analyze and extract.py"},{"location":"strucenglib_plugin/developer/developer/","text":"Developer Notes The source code of the Rhino Plugin is available on Github . Build The build system is captured in a vagrant image. Please consider the notes in /tools/vagrant in the source distribution for the setup of the vagrant container. There is a Github Action which reuses the same vagrant setup scripts to build and test StrucEng Lib on each commit. Release StrucEng Lib Release management is captured in /tools/distrib/ . Rhino uses a proprietary package manager, yak.exe , to create a packaged artifact and publish to Rhino store. Github Workflows distrib.sh build (CI) Main Build workflow, uses vagrant build script to build the project in an ubuntu-box. This ensures continuous integration and checks that the build is reproducible. dotnet build (CI) Builds the solution with dotnet and powershell. This is for testing to ensure a build outside of vagrant box. Deploy (CD) This action captures the process to deploy into Rhino store. It builds and tests the source tree with a new version and deploys the artifacts into Rhino store. This can be used if built tools are not installed on the local machine. Design Notes StrucEng Lib Plugin implements a MVVM pattern to separate UI boiler plate code from presentation and business logic. Since UI code is described in C#, it is a key goal to keep UI code as simple and straight forward as possible. To unify code, we align with the following key decisions: Eto components are described in C#. A view containing constructions of Eto component is suffixed with View . Eto components in View classes use bindings to sync their state with a ViewModel . If an action is not complicated, a ViewModel may implement it directly with a RelayCommand . Otherwise the action is implemented in a class prefixed with Exec . Action classes inherit from CommandBase . Every ViewModel inherits from StrucEngLib#ViewModelBase and is suffixed with ViewModel . Where possible, every View contains a corresponding ViewModel class. A ViewModel is instantiated first and typically stored for later access in a shared context class. A ViewModel is then passed via constructor when instantiating a View class. There are two ways to sync model state with view model state: Classes (for instance those for LinFE) sync view model state on every change to their corresponding model class. This is a decision up to each class. To unify sync, a ViewModel may choose to implement ViewModelBase#UpdateModel and ViewModelBase#UpdateViewModel to sync state. These methods are called after init and before code emit. Updating Sandwich Model The dependency installer will download the latest state of SandwichModel located in branch strucenglib_plugin . Any changes committed to this branch will be used upon reinstallation of dependency with dependency installer.","title":"Documentation"},{"location":"strucenglib_plugin/developer/developer/#developer-notes","text":"The source code of the Rhino Plugin is available on Github .","title":"Developer Notes"},{"location":"strucenglib_plugin/developer/developer/#build","text":"The build system is captured in a vagrant image. Please consider the notes in /tools/vagrant in the source distribution for the setup of the vagrant container. There is a Github Action which reuses the same vagrant setup scripts to build and test StrucEng Lib on each commit.","title":"Build"},{"location":"strucenglib_plugin/developer/developer/#release","text":"StrucEng Lib Release management is captured in /tools/distrib/ . Rhino uses a proprietary package manager, yak.exe , to create a packaged artifact and publish to Rhino store.","title":"Release"},{"location":"strucenglib_plugin/developer/developer/#github-workflows","text":"","title":"Github Workflows"},{"location":"strucenglib_plugin/developer/developer/#distribsh-build-ci","text":"Main Build workflow, uses vagrant build script to build the project in an ubuntu-box. This ensures continuous integration and checks that the build is reproducible.","title":"distrib.sh build (CI)"},{"location":"strucenglib_plugin/developer/developer/#dotnet-build-ci","text":"Builds the solution with dotnet and powershell. This is for testing to ensure a build outside of vagrant box.","title":"dotnet build (CI)"},{"location":"strucenglib_plugin/developer/developer/#deploy-cd","text":"This action captures the process to deploy into Rhino store. It builds and tests the source tree with a new version and deploys the artifacts into Rhino store. This can be used if built tools are not installed on the local machine.","title":"Deploy (CD)"},{"location":"strucenglib_plugin/developer/developer/#design-notes","text":"StrucEng Lib Plugin implements a MVVM pattern to separate UI boiler plate code from presentation and business logic. Since UI code is described in C#, it is a key goal to keep UI code as simple and straight forward as possible. To unify code, we align with the following key decisions: Eto components are described in C#. A view containing constructions of Eto component is suffixed with View . Eto components in View classes use bindings to sync their state with a ViewModel . If an action is not complicated, a ViewModel may implement it directly with a RelayCommand . Otherwise the action is implemented in a class prefixed with Exec . Action classes inherit from CommandBase . Every ViewModel inherits from StrucEngLib#ViewModelBase and is suffixed with ViewModel . Where possible, every View contains a corresponding ViewModel class. A ViewModel is instantiated first and typically stored for later access in a shared context class. A ViewModel is then passed via constructor when instantiating a View class. There are two ways to sync model state with view model state: Classes (for instance those for LinFE) sync view model state on every change to their corresponding model class. This is a decision up to each class. To unify sync, a ViewModel may choose to implement ViewModelBase#UpdateModel and ViewModelBase#UpdateViewModel to sync state. These methods are called after init and before code emit.","title":"Design Notes"},{"location":"strucenglib_plugin/developer/developer/#updating-sandwich-model","text":"The dependency installer will download the latest state of SandwichModel located in branch strucenglib_plugin . Any changes committed to this branch will be used upon reinstallation of dependency with dependency installer.","title":"Updating Sandwich Model"},{"location":"strucenglib_plugin/usage/guide/","text":"Usage Guide","title":"Usage Guide"},{"location":"strucenglib_plugin/usage/guide/#usage-guide","text":"","title":"Usage Guide"},{"location":"strucenglib_plugin/usage/troubleshooting/","text":"Windows Error: Use folder script Install anaconda new and check for error Delete virtual environment: CONDA_HOME /envs/strucenglib*. And reinstall dependencies with dependency installer.","title":"Troubleshooting"},{"location":"strucenglib_plugin/usage/troubleshooting/#windows-error","text":"Use folder script Install anaconda new and check for error Delete virtual environment: CONDA_HOME /envs/strucenglib*. And reinstall dependencies with dependency installer.","title":"Windows Error:"}]}